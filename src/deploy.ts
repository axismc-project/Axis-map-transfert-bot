import { REST, Routes } from 'discord.js';
import { config } from 'dotenv';
import { Logger } from './utils/logger.js';
import * as buildCommand from './commands/build.js';

// Charger les variables d'environnement
config();

async function deployCommands(): Promise<void> {
  const token = process.env.DISCORD_TOKEN;
  const clientId = process.env.DISCORD_CLIENT_ID;
  const guildId = process.env.DISCORD_GUILD_ID; // Optionnel pour les commandes de guilde

  if (!token || !clientId) {
    Logger.error('DISCORD_TOKEN et DISCORD_CLIENT_ID sont requis');
    process.exit(1);
  }

  const commands = [
    buildCommand.data.toJSON()
  ];

  const rest = new REST().setToken(token);

  try {
    Logger.info(`üîÑ D√©ploiement de ${commands.length} commande(s)...`);

    let data: any;

    if (guildId) {
      // D√©ploiement pour une guilde sp√©cifique (plus rapide pour le d√©veloppement)
      Logger.info(`üìç D√©ploiement sur la guilde: ${guildId}`);
      data = await rest.put(
        Routes.applicationGuildCommands(clientId, guildId),
        { body: commands }
      );
    } else {
      // D√©ploiement global (peut prendre jusqu'√† 1 heure pour √™tre disponible)
      Logger.info('üåç D√©ploiement global des commandes');
      data = await rest.put(
        Routes.applicationCommands(clientId),
        { body: commands }
      );
    }

    Logger.success(`‚úÖ ${(data as any[]).length} commande(s) d√©ploy√©e(s) avec succ√®s !`);
    
    if (!guildId) {
      Logger.info('‚ÑπÔ∏è  Les commandes globales peuvent prendre jusqu\'√† 1 heure pour √™tre disponibles');
    }

  } catch (error) {
    Logger.error('‚ùå Erreur lors du d√©ploiement des commandes', error);
    process.exit(1);
  }
}

// Fonction pour supprimer toutes les commandes (utile pour le nettoyage)
async function clearCommands(): Promise<void> {
  const token = process.env.DISCORD_TOKEN;
  const clientId = process.env.DISCORD_CLIENT_ID;
  const guildId = process.env.DISCORD_GUILD_ID;

  if (!token || !clientId) {
    Logger.error('DISCORD_TOKEN et DISCORD_CLIENT_ID sont requis');
    process.exit(1);
  }

  const rest = new REST().setToken(token);

  try {
    Logger.info('üóëÔ∏è  Suppression de toutes les commandes...');

    if (guildId) {
      await rest.put(Routes.applicationGuildCommands(clientId, guildId), { body: [] });
      Logger.success('‚úÖ Commandes de guilde supprim√©es');
    } else {
      await rest.put(Routes.applicationCommands(clientId), { body: [] });
      Logger.success('‚úÖ Commandes globales supprim√©es');
    }

  } catch (error) {
    Logger.error('‚ùå Erreur lors de la suppression des commandes', error);
    process.exit(1);
  }
}

// D√©tecter l'action √† effectuer
const action = process.argv[2];

switch (action) {
  case 'clear':
    clearCommands();
    break;
  case 'deploy':
  default:
    deployCommands();
    break;
}